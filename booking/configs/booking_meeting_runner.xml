<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy">


	<include-config code="page_object_login_page"></include-config>
	<include-config code="page_object_main_page"></include-config>
	<include-config code="page_object_utils"></include-config>
	<include-config code="page_object_credentials"></include-config>
	<include-config code="page_object_calendar_page"></include-config>
	<include-config code="page_object_event_page"></include-config>
	<include-config code="json_parser_for_booking_meeting"></include-config>

	<var-def name="flag_well_json">
		<template>${flag_well_json}</template>
	</var-def>
	
	<case>
		<if condition="${flag_well_json.toString().equals('0')}">
			<var-def name="json_positive">
				<template>${positive_request}</template>
			</var-def>
		</if>
		<else>
			<var-def name="json_slot">
				<template>${slot}</template>
			</var-def>
			<var-def name="json_positive">
				<template>${positive_request}</template>
			</var-def>
		</else>
	</case>

	<script><![CDATA[
		WFLogger.createLogger(log);

		log.info("Start to create object of the Credentials");
		def credentialsObject = credentials.getWrappedObject();
		log.info("Object of the class Creentials successfully created");

		log.info("Start to create object of the DataForBooking");
		def dataForBooking = data_for_booking.getWrappedObject();
		log.info("Object of the class DataForBooking successfully created");
		dataForBooking.setInstance(log, credentialsObject);
		log.info("Driver and logger in the DataForBooking was initilized");

		if(flag_well_json.toString().equalsIgnoreCase("0")){
			dataForBooking.parseData(json_positive);
		} else {
			dataForBooking.parseData(json_slot, json_positive);
		}
		sys.defineVariable("flag_well_json", dataForBooking.getFlagWellJson());
		sys.defineVariable("dataForBooking", dataForBooking);
	]]></script>

	<case>
		<if condition="${flag_well_json.toString().equals('1')}">
			<robotics-flow>
				<robot driver="chrome" start-in-private="true"
					maximize-on-startup="true" name="robot" close-on-completion="true">
					<capability name="chromeOptions">
						<script return="options"><![CDATA[
							options = new org.openqa.selenium.chrome.ChromeOptions();
							properties = [:];
							properties.put("profile.default_content_setting_values.geolocation", 2);
							properties.put("profile.default_content_setting_values.notifications", 2);
							options.setExperimentalOption("prefs", properties);
						]]></script>
					</capability>
					<script><![CDATA[
						WebDriver driver = driver();
						WFLogger.createLogger(log);

						log.info("Start to create object of the Credentials");
						def credentialsObject = credentials.getWrappedObject();
						log.info("Object of the class Creentials successfully created");

						log.info("Start to create object of the Utils");
						def utilsObject = utils.getWrappedObject();
						log.info("Object of the class Utils successfully created");
						utilsObject.setInctance(driver, log);
						log.info("Driver in the Utils was initilized");

						log.info("Create object of the LoginPageActions");
						def loginPageActions = login_page_actions.getWrappedObject();
						log.info("Object of the class LoginPageActions successfully created");
						loginPageActions.setInstance(driver, log, utilsObject, credentialsObject);
						log.info("Driver and logger in the LoginPageActions were initilized");

						log.info("Create object of the MainPageActions");
						def mainPageActions = main_page_actions.getWrappedObject();
						log.info("Object of the class MainPageActions successfully created");
						mainPageActions.setInstance(driver, log, utilsObject, credentialsObject);
						log.info("Driver and logger and utils object in the MainPageActions were initilized");

						log.info("Create object of the CalendarPageActions");
						def calendarPageActions = calendar_page_actions.getWrappedObject();
						log.info("Object of the class CalendarPageActions successfully created");
						calendarPageActions.setInstance(driver, log, utilsObject, credentialsObject);
						log.info("Driver and logger and utils object in theCalendarPageActions were initilized");

						log.info("Create object of the EventPageActions");
						def eventPageActions = event_page_actions.getWrappedObject();
						log.info("Object of the class EventPageActions successfully created");
						eventPageActions.setInstance(driver, log, utilsObject, credentialsObject);
						log.info("Driver and logger and utils object in the EventPageActions were initilized");

						loginPageActions.enterMail();
						mainPageActions.pressCalendarIcon();
						eventPageActions.fillDataAndSendRequest(dataForBooking.getWrappedObject().getMeetingsList(),calendarPageActions)

						//for checking response in messages
						sys.defineVariable("amount_meetings", dataForBooking.getWrappedObject().getMeetingsListSize());
					]]></script>
				</robot>
			</robotics-flow>
		</if>
	</case>

	<export include-original-data="true">
		<case>
			<if condition="${flag_well_json.toString().equals('1')}">
				<single-column name="amount_meetings">
					<var name="amount_meetings" />
				</single-column>
				<single-column name="flag_well_json">
					<var name="flag_well_json" />
				</single-column>
			</if>
			<else>
				<single-column name="flag_well_json">
					<var name="flag_well_json" />
				</single-column>
			</else>
		</case>
	</export>

</config>
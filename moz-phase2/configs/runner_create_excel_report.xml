<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy">

	<log>###runner_create_excel_report###</log>
	
	<include-config code="stopper"></include-config>
	<include-config code="properties"></include-config>
	<include-config code="email_sender_javax"></include-config>
	<include-config code="secure_ds"></include-config>

	<script><![CDATA[
		properties = propertiesObject.getWrappedObject();
		columnsTitles = columnsTitlesObject.getWrappedObject();
		secureDatastore = datastore.getWrappedObject();
		emailFrom = secureDatastore.getEmailService();
		emailTo = properties.EMAIL_TO;
		emailCC = properties.EMAIL_CC;
		password = secureDatastore.getEmailServicePassword();
		attemptMaxQty = properties.RUNNER_CREATE_EXCEL_REPORT_ATTEMPT_MAX_QTY; //Put here yor attempts max value
		cachelifeCycle = properties.RUNNER_CREATE_EXCEL_REPORT_CACHE_LIFE_CYCLE; //Put here yor Values in SECONDS
		botTitle = properties.RUNNER_CREATE_EXCEL_REPORT_BOT_TITLE; //Put here yor bot title
		stopperClass =  stopperObject.getWrappedObject();
		stopperClass.setBotParameters(attemptMaxQty,cachelifeCycle, botTitle, log);
		stacktrace="";
		isExecuteCode = true; //isExecuteCode means that we didn't exceed the limit of attemtps or isCacheValid!=true (for first attempt isExecuteCode alwaus ==true)
	]]></script>

	<while condition="${isExecuteCode}">
		don't change anything here
		<call name="initialize_cache_and_attempts_qty">
			<call-param name="stopperClassPassedObject">
				<script return="stopperClass"><![CDATA[
					return stopperClass;
				]]></script>
			</call-param>
		</call>

		<script><![CDATA[
			isOneMoreAttemptAvailable = stopperClass.checkAttemtpsQty(); //isOneMoreAttemptAvailable means we didn't exceed a limit of attempts
			if (!isOneMoreAttemptAvailable) { //if we exceeded the limit, generate new exception not in the try loop

				if(item.getWrappedObject().getSubmission().getAwsHit().getProcessingAttempts()==0){

					//send fail email
					emailSender = emailSenderObject.getWrappedObject().getInstance(emailFrom, emailTo, password, log);
					emailSender
							.setSubject("BP " + item.getWrappedObject().getRun().getCampaignName().toString() + " - crashed")
							.setBody("BP " + item.getWrappedObject().getRun().getCampaignName().toString() + " - crashed" + "\n"+
							"- Instance name: " + applicationHost.getWrappedObject().toString() + "\n" +
							"- Bot name: " + item.getWrappedObject().getCampaignDto().getTitle().toString() + "\n" +
							"- Start date: " + item.getWrappedObject().getRun().getStartDate().toString() + "\n" +
							"- Link to BP: " + applicationHost.getWrappedObject().toString() +
							"/workfusion/secure/business-process/edit/"+item.getWrappedObject().getRun().getRootRunUuid().toString())
							.setBody(stacktrace.toString(), "ERROR")
							.setCC(emailCC)
							.build()
							.perform();

				}
				throw new Exception("STOP PROCESS");
			}
			isCacheValid = stopperClass.isCacheValid(); //isCacheValid means we have a good last attempt not far away in the past
			isExecuteCode = isOneMoreAttemptAvailable&(!isCacheValid);
		]]></script>

		<case>
			<if condition="${isCacheValid}"> <!-- cache good -> omit excecution of the bot -->
				<script><![CDATA[
					log.info(botTitle + " has omitted execution, it has the valid cache");
				]]></script>
			</if>
			<else>
				<try>
					<body>
						<!-- put your code here -->
						<include-config code="excel_editor"></include-config>

						<script><![CDATA[
							import org.joda.time.DateTime;
							import org.joda.time.format.DateTimeFormat;
							import org.joda.time.format.DateTimeFormatter;
							//path to File
							filePath = properties.FILE_PATH+properties.FILE_NAME;

							//Input column with url
							column="B"

							//Work sheet
							sheetName="Current"

							// Header size
							headerSize=1

							// datastore name
							datastoreName=properties.DS_NAME;
							datastoreNameForExcelReportPath=properties.DS_NAME_FOR_EXCEL_REPORT_PATH;

							//include bot object
							excelRead = excel_editor.getWrappedObject();
						]]></script>

						<script><![CDATA[
							dataStoreMapList=[]

							// Columns which we need write to file
							columns=[
								columnsTitles.LINKING_DOMAINS_ROOT_DOMAIN,
								columnsTitles.INBOUND_LINKS_ROOT_DOMAIN,
								columnsTitles.DOMAIN_AUTHORITY_ROOT_DOMAIN,
								columnsTitles.JUST_DISCOVERED_ROOT_DOMAIN,
								columnsTitles.LOST_ROOT_DOMAIN,
								columnsTitles.NET_ROOT_DOMAIN,
								columnsTitles.LINKING_DOMAINS_SUB_DOMAIN,
								columnsTitles.INBOUND_LINKS_SUB_DOMAIN,
								columnsTitles.DOMAIN_AUTHORITY_SUB_DOMAIN,
								columnsTitles.JUST_DISCOVERED_SUB_DOMAIN,
								columnsTitles.LOST_SUB_DOMAIN,
								columnsTitles.NET_SUB_DOMAIN
							]

							indexMap=[:]

							indexMap.put(columnsTitles.LINKING_DOMAINS_ROOT_DOMAIN, 'G')
							indexMap.put(columnsTitles.INBOUND_LINKS_ROOT_DOMAIN, 'H')
							indexMap.put(columnsTitles.DOMAIN_AUTHORITY_ROOT_DOMAIN,'I')
							indexMap.put(columnsTitles.JUST_DISCOVERED_ROOT_DOMAIN,'J')
							indexMap.put(columnsTitles.LOST_ROOT_DOMAIN,'K')
							indexMap.put(columnsTitles.NET_ROOT_DOMAIN,'L')
							indexMap.put(columnsTitles.LINKING_DOMAINS_SUB_DOMAIN, 'M')
							indexMap.put(columnsTitles.INBOUND_LINKS_SUB_DOMAIN, 'N')
							indexMap.put(columnsTitles.DOMAIN_AUTHORITY_SUB_DOMAIN,'O')
							indexMap.put(columnsTitles.JUST_DISCOVERED_SUB_DOMAIN,'P')
							indexMap.put(columnsTitles.LOST_SUB_DOMAIN,'Q')
							indexMap.put(columnsTitles.NET_SUB_DOMAIN,'R')
						]]></script>

						<loop item="row">
							<list>
								<datastore name="${datastoreName}">
									select * from @this;
								</datastore>
							</list>
							<body>
								<script><![CDATA[
									columns.forEach({column ->
										conversionMap = [:]
										conversionMap.put(column, row.get(column).toString())
										dataStoreMapList.add(conversionMap)
									})
								]]></script>
							</body>
						</loop>

						<robotics-flow>
							<robot driver="desktop" name="desktopWrapper"
								close-on-completion="true">
								<script><![CDATA[
									getFileContent = { RemoteWebDriver dDriver, String filePath ->
										Object res = dDriver.executeScript("def bytes = new File('" + filePath.replace('\\', '/') + "').bytes; \n"
												+ "return Base64.getEncoder().encodeToString(bytes);", "GROOVY")
										byte[] content = Base64.getDecoder().decode(res.toString())
										return content
									}
									fileInBytes = getFileContent(driver(),filePath)
									excelRead.setFile(fileInBytes)
								]]></script>
							</robot>
						</robotics-flow>

						<script><![CDATA[
							// Read ExcelFile
							try {
								excelRead.readExcelBook()
							}catch (Exception ex){
								errorMessage = ex.getMessage()
							}
							// WorkSheets
							sheetFrom = excelRead.getSheet(sheetName)
							sheetTo = excelRead.createDefaultSheet()
							// Paste new Sheet Before Needed Sheet
							excelRead.insertNewSheetBefore(sheetTo, sheetFrom)
							// Paste Parsed Values
							columns.stream().forEach({ columnName ->
								list =[]
								dataStoreMapList.stream().forEach({ map -> if (map.get(columnName)!=null){list.add(map.get(columnName))} })
								excelRead.insertDoubleValues( sheetTo, headerSize, indexMap.get(columnName), list)
							})
							// Copy Rows
							excelRead.copyRowFull(sheetFrom, sheetTo,0)
							// Copy Columns
							excelRead.copyColumnFull(sheetFrom,sheetTo, 0)
							excelRead.copyColumnFull(sheetFrom,sheetTo, 1)
							excelRead.copyColumnFull(sheetFrom,sheetTo, 2)
							excelRead.copyColumnFull(sheetFrom,sheetTo, 3)
							excelRead.copyColumnFull(sheetFrom,sheetTo, 4)
							excelRead.copyColumnFull(sheetFrom,sheetTo, 5)
							// Copy all Style from Template Sheet
							excelRead.cloneSheetStyle(sheetFrom,sheetTo)
						]]></script>

						<script><![CDATA[
							// Save tempFile
							tempFolder = System.getProperty("java.io.tmpdir")
							fileName = "/"+properties.FILE_NAME;
							temporaryFilePath = tempFolder+fileName
							fileOut = new FileOutputStream(temporaryFilePath)
							excelRead.getMyExcelBook().write(fileOut)
							fileOut.flush()
							fileOut.close()
						]]></script>

						<script><![CDATA[
							log.info("EXCEL REPORT PATH: " + temporaryFilePath.toString())
							Map mapFilePath = new HashMap();
							mapFilePath.put("filePath", temporaryFilePath.toString());
							jsonValueMapFilePath = new com.google.gson.Gson().toJson(mapFilePath);
						]]></script>

						<create-datastore name="${datastoreNameForExcelReportPath}"></create-datastore>

						<datastore name="${datastoreNameForExcelReportPath}">
							delete from @this;
						</datastore>

						<insert-datastore datastore-name="${datastoreNameForExcelReportPath}"
							json-value-map="${jsonValueMapFilePath}" create="true" />
						<!-- end of your code -->

						<!-- don't change anything here -->
						<call name="increment_attempts_qty">
							<call-param name="stopperClassPassedObject">
								<script return="stopperClass"><![CDATA[
									return stopperClass;
								]]></script>
							</call-param>
						</call>
						<!-- don't change anything here -->
						<call name="store_last_good_attempt">
							<call-param name="stopperClassPassedObject">
								<script return="stopperClass"><![CDATA[
									isExecuteCode = false; //if process successfully finishes execution, while loop will be interrupted by isExecuteCode
									return stopperClass;
								]]></script>
							</call-param>
						</call>
					</body>
					<catch>
						<!-- put comments here -->
						<script><![CDATA[
							log.error(_exception_message.getWrappedObject(), _exception.getWrappedObject())
							stacktrace=_exception_stacktrace.getWrappedObject().toString();
							stopperClass.setErrorMessage("AN ERROR occured on the attempt No: "+(stopperClass.getQty()+1) + _exception_message.getWrappedObject() + _exception.getWrappedObject());
						]]></script>
						<!-- don't change anything here -->
						<call name="increment_attempts_qty">
							<call-param name="stopperClassPassedObject">
								<script return="stopperClass"><![CDATA[
									return stopperClass;
								]]></script>
							</call-param>
						</call>
					</catch>
				</try>
			</else>
		</case>
	</while>

	<export include-original-data="true"></export>

</config>